[project]
name = "sr-kit-test"
description = "A collection of test scripts for the Student Robotics v4 kit."
readme = "README.md"
license = "MIT"
authors = [{name = "Will Barber", email = "wbarber@studentrobotics.org"}]
maintainers = [{name = "Student Robotics", email = "kit-team@studentrobotics.org"}]

classifiers = [
    "Topic :: Software Development :: Libraries :: Python Modules",
    "Programming Language :: Python :: 3",
    "Operating System :: OS Independent",
    "Development Status :: 4 - Beta",
    "Intended Audience :: Developers",
    "Typing :: Typed",
]

dynamic = ["version"]
requires-python = ">=3.8"
dependencies = [
    "pyserial >=3,<4",
    "avrdude-windows ==7.1.0; sys_platform == 'win32'",
    "april_vision >=3,<4",
    "opencv-python >=4.10,<5",
]

[project.optional-dependencies]
dev = [
    "poethepoet >=0.0.1,<1",
    "ruff >=0.11.0,<0.12",
    "mypy==1.9.0",
    "build",
    "types-pyserial >=3,<4",
]

[project.scripts]
kit_test = "kit_test.cli:main"

[project.urls]
Repository = "https://github.com/srobo/kit_test"

[tool.setuptools.packages]
find = {}

[build-system]
requires = ["setuptools>=60", "wheel", "setuptools_scm>=8"]
build-backend = "setuptools.build_meta"

[tool.setuptools_scm]
version_file = "kit_test/_version.py"

# ### Linting Rules ###
[tool.ruff]
line-length = 95
lint.select = [
    "D",  # pydocstyle
    "E",  # pycodestyle error
    "F",  # pyflakes
    "I",  # isort
    "W",  # pycodestyle warning
    "RUF",  # ruff-specific
    "B006",  # mutable default argument
    "B021",  # f-string docstring
    "COM818",  # warn about implicitly creating a tuple
    "SLF001",  # warn about accessing private members, these can be noqa'd when necessary
    "NPY201",  # warn about numpy 2.0 compatibility
]
preview = true  # Enable preview to get the rest of pycodestyle errors
lint.ignore = [
    "D104",  # Ignoe missing docstring in public package
    "D105",  # Ignore missing docstring in magic method
    "D107",  # Ignore missing docstring in __init__
    "D401",  # Ignore first line of docstring should be in imperative mood
    "D203",  # Ignore 1 blank line required before class docstring
    "D212",  # Ignore Multi-line docstring summary should start at the first line
    "RUF005",  # Allow alternate iterable unpacking
    "RUF015",  # Allow + concatenation
]

# ### Formatting Rules ###
[tool.mypy]
mypy_path = "stubs"

warn_unused_ignores = true
warn_return_any = true
show_error_codes = true

strict_optional = true
implicit_optional = true

disallow_any_unimported = true
disallow_subclassing_any = true
#disallow_any_generics = true

disallow_untyped_calls = true
disallow_untyped_defs = true
disallow_incomplete_defs = true
disallow_untyped_decorators = true

check_untyped_defs = true

# ### Tasks ###
[tool.poe]
env = {PYMODULE = "kit_test"}

[tool.poe.tasks.lint]
help = "Run ruff against the project to check for linting errors."
cmd = "ruff check $PYMODULE"

[tool.poe.tasks.type]
help = "Run mypy against the project to check for type errors."
cmd = "python -m mypy $PYMODULE"

[tool.poe.tasks.check]
help = "Check the project for linting, type and test errors."
sequence = ["lint", "type"]

[tool.poe.tasks.fix]
help = "Use ruff to fix any auto-fixable linting errors."
cmd = "ruff check --fix-only $PYMODULE"

[tool.poe.tasks.build]
help = "Build the wheel and source distributions."
cmd = "python -m build"

[tool.poe.tasks.clean]
help = "Clean the project of any build artifacts."
sequence = [
    "shutil:rmtree('dist', ignore_errors=1)",
    "shutil:rmtree('build', ignore_errors=1)",
]
default_item_type = "script"
